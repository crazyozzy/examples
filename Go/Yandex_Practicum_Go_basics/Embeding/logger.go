// –ó–∞–¥–∞–Ω–∏–µ 5
// –ö–∞–∂–¥—ã–π —É–≤–∞–∂–∞—é—â–∏–π —Å–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ª–æ–≥–≥–µ—Ä üòÅ.
// –í —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Go —É–∂–µ –µ—Å—Ç—å –ª–æ–≥–≥–µ—Ä ‚Äî –≤ –ø–∞–∫–µ—Ç–µ log. –£ —ç—Ç–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —É—Ä–æ–≤–Ω—è –ª–æ–≥–∞ (log level), —Ç–æ –µ—Å—Ç—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –º–µ—Ç–æ–¥ log.Println –∏ log.Printf. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞—Å—à–∏—Ä–∏—Ç—å —ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç —Å–ª–µ–¥—É—é—â–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:
// SetLogLevel(logLvl LogLevel);
// Infoln(msg string);
// Warnln(msg string);
// Errorln(msg string).
// LogLevel ‚Äî –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
// Info;
// Warning;
// Error.
// –õ–æ–≥–≥–µ—Ä –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –¥–æ–ª–≥–æ, –ø—Ä–∏–∫—Ä—É—á–∏–≤–∞—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω—É–∂–Ω—ã—Ö —Ñ–∏—á, –Ω–æ —Å—Ç–æ–∏—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Å—Ç–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ —Ç–∏–ø–∞. –§—É–Ω–∫—Ü–∏–∏ Infoln, Warnln –∏ Errorln –¥–æ–ª–∂–Ω—ã –æ–±–æ—Ä–∞—á–∏–≤–∞—Ç—å –º–µ—Ç–æ–¥ log.Println, –¥–æ–±–∞–≤–ª—è—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å.
// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã:
// func main() {
//     logger := NewLogExtended()
//     logger.SetLogLevel(LogLevelWarning)
//     logger.Infoln("–ù–µ –¥–æ–ª–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å—Å—è")
//     logger.Warnln("Hello")
//     logger.Errorln("World")
//     logger.Println("Debug")
// }
// 2021/05/19 23:04:14 WARN Hello
// 2021/05/19 23:04:14 ERR World
// 2021/05/19 23:04:14 Debug
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
// –ü—Ä–æ—Å—Ç–æ –≤—ã–∑–æ–≤ log.Println() –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π std –ø–∞–∫–µ—Ç–∞ log (–∑–∞–≥–ª—è–Ω–∏—Ç–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é). –ù–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –æ–±—ä–µ–∫—Ç —Ç–∏–ø–∞ LogExtended, —Ç–æ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Ç–∏–ø log.Logger.
// –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç–∏–ø–∞ log.Logger:
// func New(out io.Writer, prefix string, flag int) *Logger
// –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∫–∞–∑–∞—Ç–µ–ª—å, –ø–æ—ç—Ç–æ–º—É —Ç–∏–ø –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
// type LogExtended struct {
//     *log.Logger
//     logLevel LogLevel // LogLevel —ç—Ç–æ enum
// }

package main

import (
	// "fmt"
	"log"
	"os"
)

type LogLevel int
const (
	LevelTrace		LogLevel = iota
	LevelDebug
    LevelInfo
    LevelWarning
    LevelError
)

type LogExtended struct {
    *log.Logger
    logLevel LogLevel // LogLevel —ç—Ç–æ enum
}

func NewLogExtended() *LogExtended {
	return &LogExtended{
		Logger: log.New(os.Stderr, "", log.LstdFlags),
		logLevel: LevelError,
	}
}

func (sll *LogExtended) SetLogLevel(ll LogLevel) {
	sll.logLevel = ll
}

func (ll LogExtended) llCompare(messageLogLevel LogLevel, prefix, message string) {
	// switch ll.logLevel {
	// case LevelInfo:
	// 	ll.Logger.Println(fmt.Sprint(string(messageLogLevel), "\t", message))
	// case LevelWarning:
	// 	if messageLogLevel != LevelInfo {
	// 		ll.Logger.Println(fmt.Sprint(string(messageLogLevel), "\t", message))
	// 	}
	// case LevelError:
	// 	if messageLogLevel == LevelError {
	// 		ll.Logger.Println(fmt.Sprint(string(messageLogLevel), "\t", message))
	// 	}
	// default:
	// 	return
	// }

	if messageLogLevel >= ll.logLevel {
		ll.Logger.Println(prefix + message)
	}
}

func (ll LogExtended) Traceln(logString string) {
	ll.llCompare(LevelInfo, "TRACE\t", logString)
}

func (ll LogExtended) Debugln(logString string) {
	ll.llCompare(LevelInfo, "DEBUG\t", logString)
}

func (ll LogExtended) Infoln(logString string) {
	ll.llCompare(LevelInfo, "INFO\t", logString)
}

func (ll LogExtended) Warnln(logString string)  {
	ll.llCompare(LevelWarning, "WARNING\t", logString)
}

func (ll LogExtended) Errorln(logString string) {
	ll.llCompare(LevelError, "ERROR\t", logString)
}

func main() {
    logger := NewLogExtended()
    logger.SetLogLevel(LevelWarning)
    logger.Infoln("–ù–µ –¥–æ–ª–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å—Å—è")
    logger.Warnln("Hello")
    logger.Errorln("World")
	logger.SetLogLevel(LevelDebug)
    logger.Debugln("Debug")
} 


// –û—Ç–≤–µ—Ç:
// package main

// import (
//     "log"
//     "os"
// )

// type LogLevel int

// func (l LogLevel) IsValid() bool {
//     switch l {
//     case LogLevelInfo, LogLevelWarning, LogLevelError:
//         return true
//     default:
//         return false
//     }
// }

// const (
//     LogLevelError LogLevel = iota
//     LogLevelWarning
//     LogLevelInfo
// )

// type LogExtended struct {
//     *log.Logger
//     logLevel LogLevel
// }

// func (l *LogExtended) SetLogLevel(logLvl LogLevel) {
//     if !logLvl.IsValid() {
//         return
//     }
//     l.logLevel = logLvl
// }

// func (l *LogExtended) Infoln(msg string) {
//     l.println(LogLevelInfo, "INFO ", msg)
// }

// func (l *LogExtended) Warnln(msg string) {
//     l.println(LogLevelWarning, "WARN ", msg)
// }

// func (l *LogExtended) Errorln(msg string) {
//     l.println(LogLevelError, "ERR ", msg)
// }

// func (l *LogExtended) println(srcLogLvl LogLevel, prefix, msg string) {
//     if l.logLevel < srcLogLvl {
//         return
//     }

//     l.Logger.Println(prefix + msg)
// }

// func NewLogExtended() *LogExtended {
//     return &LogExtended{
//         Logger:   log.New(os.Stderr, "", log.LstdFlags),
//         logLevel: LogLevelError,
//     }
// }

// func main() {
//     logger := NewLogExtended()
//     logger.SetLogLevel(LogLevelWarning)
//     logger.Infoln("–ù–µ –¥–æ–ª–∂–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å—Å—è")
//     logger.Warnln("Hello")
//     logger.Errorln("World")
// }